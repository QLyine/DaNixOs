# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

let
  uuid = "6211507d-87dd-400b-a57d-da14572f1e8b";  # Replace with your actual UUID

  btrfsSubvol = subvol: options: {
    device = "/dev/disk/by-uuid/${uuid}";
    fsType = "btrfs";
    options = options ++ [ "subvol=${subvol}" ];
  };
in

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems = {
    "/" = btrfsSubvol "@" [ "compress=zstd:3" "noatime" "ssd" ];

    # Docker — no compression
    "/var/lib/containers" = btrfsSubvol "@/@var-lib-podman" [ "noatime" "ssd" "nodatacow" ];
  };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/8AB5-CE67";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/9491f599-35cd-4bde-b89b-6a9bf0423cf6"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp13s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
